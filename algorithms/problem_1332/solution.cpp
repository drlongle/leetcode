/*
1332. Remove Palindromic Subsequences
Easy

Given a string s consisting only of letters 'a' and 'b'. In a single step you can remove one palindromic subsequence from s.

Return the minimum number of steps to make the given string empty.

A string is a subsequence of a given string, if it is generated by deleting some characters of a given string without changing its order.

A string is called palindrome if is one that reads the same backward as well as forward.

Example 1:
Input: s = "ababa"
Output: 1
Explanation: String is already palindrome

Example 2:
Input: s = "abb"
Output: 2
Explanation: "abb" -> "bb" -> "". 
Remove palindromic subsequence "a" then "bb".

Example 3:
Input: s = "baabb"
Output: 2
Explanation: "baabb" -> "b" -> "". 
Remove palindromic subsequence "baab" then "b".

Example 4:
Input: s = ""
Output: 0

Constraints:
0 <= s.length <= 1000
s only consists of letters 'a' and 'b'
*/

#include <algorithm>
#include <atomic>
#include <bitset>
#include <cassert>
#include <cmath>
#include <condition_variable>
#include <functional>
#include <future>
#include <iostream>
#include <iterator>
#include <list>
#include <map>
#include <numeric>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <thread>
#include <unordered_map>
#include <unordered_set>
#include <vector>

using namespace std;

#define ll long long
#define ull unsigned long long

class Solution {
public:
    bool isPalindrome(const string& s) {
        int sz = s.size();
        for (int begin = 0, end = sz-1; begin < end; ++begin, --end)
            if (s[begin] != s[end])
                return false;
        return true;
    }
    int removePalindromeSub(string s) {
        if (s.empty())
            return 0;
        if (isPalindrome(s))
            return 1;
        return 2;
    }
};

int main() {
    Solution sol;
    string s;

    // Output: 1
    s = "ababa";

    // Output: 2
    //s = "abb";

    // Output: 2
    //s = "baabb";

    // OUtput: 0
    //s = "";

    // Output: 2
    //s = "ababb";

    // Output: 2
    s = "bbaabaaa";
    
    cout << "Result: " << sol.removePalindromeSub(s) << endl;
    
    return 0;
}
